{"version":3,"sources":["components/Character/index.js","store/actions.js","components/pages/Main/index.jsx","components/pages/ExtendedCharacter/index.jsx","components/pages/EmptyPage/index.jsx","store/sagas.js","store/rootSaga.js","store/rootReducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Character","id","name","image","history","useHistory","handleClick","useCallback","push","className","src","alt","onClick","updateCharacters","characters","type","payload","updateCharacter","character","Main","dispatch","useDispatch","useSelector","state","page","useEffect","handleNext","hasMore","useMemo","dataLength","length","next","loader","endMessage","style","textAlign","map","key","ExtendedCharacter","match","params","status","species","gender","created","fetchCharacter","EmptyPage","fetchCharacters","watchFetches","select","call","getCharacter","results","put","console","log","takeEvery","rootSaga","sagas","all","saga","spawn","initialState","reducer","action","concat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d9140734.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport './styles.scss';\nimport { useHistory } from \"react-router-dom\";\n\nconst Character = ({ \n    id,\n    name, \n    image,\n}) => {\n    const history = useHistory();\n\n    const handleClick = useCallback(() => {\n        history.push(`/character/${id}`);\n    }, [history, id]);\n\n  return (\n    <div className=\"character-container\">\n        <div className=\"character-container__image\">\n            <img src={image} alt={name} />\n        </div>\n        <div className=\"character-container__description\">\n            <h2>{name}</h2>\n        </div>\n        <div className=\"character-container__button\">\n            <button onClick={handleClick}>More...</button>\n        </div>\n    </div>\n  );\n};\n\nexport default Character;\n","export const FETCH_CHARACTERS = 'FETCH_CHARACTERS';\nexport const UPDATE_CHARACTERS = 'UPDATE_CHARACTERS';\nexport const UPDATE_PAGE = 'UPDATE_PAGE';\nexport const FETCH_CHARACTER = 'FETCH_CHARACTER';\nexport const UPDATE_CHARACTER = 'UPDATE_CHARACTER';\n\nexport const fetchCharacters = () => ({\n    type: FETCH_CHARACTERS,\n});\n\nexport const updateCharacters = (characters) => ({\n    type: UPDATE_CHARACTERS,\n    payload: characters,\n});\n\nexport const updatePage = () => ({\n    type: UPDATE_PAGE,\n});\n\nexport const fetchCharacter = (id) => ({\n    type: FETCH_CHARACTER,\n    payload: id,\n});\n\nexport const updateCharacter = (character) => ({\n    type: UPDATE_CHARACTER,\n    payload: character,\n});","import React, { useCallback, useMemo, useEffect } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Character from \"components/Character\";\nimport { fetchCharacters } from \"store/actions\";\nimport './styles.scss';\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const characters = useSelector((state) => state.characters);\n  const page = useSelector((state) => state.page);\n\n  useEffect(() => {\n    dispatch(fetchCharacters());\n  }, [dispatch]);\n\n  const handleNext = useCallback(() => {\n    dispatch(fetchCharacters());\n  }, [dispatch]);\n\n  const hasMore = useMemo(() => page !== 20, [page]);\n\n  return (\n    <InfiniteScroll\n      dataLength={characters.length} //This is important field to render the next data\n      next={handleNext}\n      hasMore={hasMore}\n      loader={<h4>Loading...</h4>}\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      <div className=\"characters_container\">\n        {characters.map(({ id, name, image }) => (\n          <Character key={id} id={id} name={name} image={image} />\n        ))}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default Main;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchCharacter } from 'store/actions';\nimport './styles.scss';\n\nconst ExtendedCharacter = ({ match }) => {\n    const { params: { id } } = match;\n\n    const dispatch = useDispatch();\n    const { name, status, species, gender, image, created} = useSelector((state) => state.character);\n\n    useEffect(() => {\n        dispatch(fetchCharacter(id));\n    }, [dispatch, id]);\n\n    return(\n        <div className=\"main-container\">\n            <img src={image} alt={name} />\n            <div className=\"main-container__description\">\n                <strong>Name</strong><p>{name}</p>\n                <strong>Status</strong><p>{status}</p>\n                <strong>Species</strong><p>{species}</p>\n                <strong>Gender</strong><p>{gender}</p>\n                <strong>Created</strong><p>{created}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default ExtendedCharacter;","import React from 'react';\nimport './styles.scss';\n\nconst EmptyPage = () => {\n    return (\n        <div className=\"error-container\">\n            The page doesn't exist!\n        </div>\n    )\n};\n\nexport default EmptyPage;","import {\n  FETCH_CHARACTERS,\n  updateCharacters,\n  FETCH_CHARACTER,\n  updateCharacter,\n  updatePage,\n} from \"./actions\";\nimport { select, put, call, takeEvery } from \"redux-saga/effects\";\nimport { getCharacter } from \"rickmortyapi\";\n\nfunction* fetchCharacters() {\n  try {\n    const page = yield select((state) => state.page);\n    const { results: characters } = yield call(getCharacter, { page });\n    yield put(updateCharacters(characters));\n    yield put(updatePage());\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* fetchCharacter({ payload: id }) {\n  try {\n    const character = yield call(getCharacter, +id);\n    yield put(updateCharacter(character));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* watchFetches() {\n  yield takeEvery(FETCH_CHARACTERS, fetchCharacters);\n  yield takeEvery(FETCH_CHARACTER, fetchCharacter);\n}\n","import { watchFetches } from \"./sagas\";\nimport { spawn, call, all } from \"redux-saga/effects\";\n\nexport default function* rootSaga() {\n  const sagas = [watchFetches];\n\n  yield all(\n    sagas.map((saga) =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      })\n    )\n  );\n}\n","import {\n  FETCH_CHARACTERS,\n  UPDATE_CHARACTERS,\n  UPDATE_PAGE,\n  FETCH_CHARACTER,\n  UPDATE_CHARACTER,\n} from \"./actions\";\n\nconst initialState = {\n  characters: [],\n  character: {},\n  page: 1,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case FETCH_CHARACTERS:\n      return state;\n    case UPDATE_CHARACTERS:\n      return {\n        ...state,\n        characters: state.characters.concat(action.payload),\n      };\n    case FETCH_CHARACTER:\n      return state;\n    case UPDATE_CHARACTER:\n      return {\n        ...state,\n        character: action.payload,\n      };\n    case UPDATE_PAGE:\n      return { ...state, page: state.page + 1 };\n    default:\n      return initialState;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootSaga from './rootSaga';\nimport reducer from './rootReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport {\n  useHistory,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Main from 'components/pages/Main/index.jsx';\nimport ExtendedCharacter from 'components/pages/ExtendedCharacter';\nimport EmptyPage from 'components/pages/EmptyPage';\nimport store from 'store/store';\n\nfunction App() {\n  const history = useHistory();\n\n  return (\n    <Router history={history}>\n      <Provider store={store}>\n        <Switch>\n          <Route exact path=\"/character/:id\" component={ExtendedCharacter} />\n          <Route exact path=\"/rick-morty\" component={Main} />\n          <Route component={EmptyPage} />\n        </Switch>\n      </Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}